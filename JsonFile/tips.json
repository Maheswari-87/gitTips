[{
    "title": "Everyday Git in twenty commands or so",
    "tip": "git help everyday"
}, {
    "title": "Show helpful guides that come with Git",
    "tip": "git help -g"
}, {
    "title": "Search change by content",
    "tip": "git log -S'<a term in the source>'"
}, {
    "title": "Show changes over time for specific file",
    "tip": "git log -p <file_name>"
}, {
    "title": "Remove sensitive data from history, after a push",
    "tip": "git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch <path-to-your-file>' --prune-empty --tag-name-filter cat -- --all && git push origin --force --all"
}, {
    "title": "Sync with remote, overwrite local changes",
    "tip": "git fetch origin && git reset --hard origin/master && git clean -f -d"
}, {
    "title": "List of all files till a commit",
    "tip": "git ls-tree --name-only -r <commit-ish>"
}, {
    "title": "Git reset first commit",
    "tip": "git update-ref -d HEAD"
}, {
    "title": "Reset: preserve uncommitted local changes",
    "tip": "git reset --keep <commit>"
}, {
    "title": "List all the conflicted files",
    "tip": "git diff --name-only --diff-filter=U"
}, {
    "title": "List of all files changed in a commit",
    "tip": "git diff-tree --no-commit-id --name-only -r <commit-ish>"
}, {
    "title": "Unstaged changes since last commit",
    "tip": "git diff"
},  {
    "title": "Show both staged and unstaged changes",
    "tip": "git diff HEAD"
}, {
    "title": "List all branches that are already merged into master",
    "tip": "git branch --merged master"
}, {
    "title": "Quickly switch to the previous branch",
    "tip": "git checkout -",
    "alternatives": ["git checkout @{-1}"]
}, {
    "title": "Remove branches that have already been merged with master",
    "tip": "git branch --merged master | grep -v '^\\*' | xargs -n 1 git branch -d"
}, {
    "title": "List all branches and their upstreams, as well as last commit on branch",
    "tip": "git branch -vv"
}, {
    "title": "Track upstream branch",
    "tip": "git branch -u origin/mybranch"
}, {
    "title": "Delete local branch",
    "tip": "git branch -d <local_branchname>"
}, {
    "title": "Delete remote branch",
    "tip": "git push origin --delete <remote_branchname>"
}, {
    "title": "Create local tag",
    "tip": "git tag <tag-name>"
}, {
    "title": "Delete local tag",
    "tip": "git tag -d <tag-name>"
}, {
    "title": "Delete remote tag",
    "tip": "git push origin :refs/tags/<tag-name>"
}, {
    "title": "Undo local changes with the last content in head",
    "tip": "git checkout -- <file_name>"
}, {
    "title": "Revert: Undo a commit by creating a new commit",
    "tip": "git revert <commit-ish>"
}, {
    "title": "Reset: Discard commits, advised for private branch",
    "tip": "git reset <commit-ish>"
}, {
    "title": "Reword the previous commit message",
    "tip": "git commit -v --amend"
}, {
    "title": "See commit history for just the current branch",
    "tip": "git cherry -v master"
}, {
    "title": "Amend author.",
    "tip": "git commit --amend --author='Author Name <email@address.com>'"
}, {
    "title": "Reset author, after author has been changed in the global config.",
    "tip": "git commit --amend --reset-author --no-edit"
}, {
    "title": "Changing a remote's URL",
    "tip": "git remote set-url origin <URL>"
}, {
    "title": "Get list of all remote references",
    "tip": "git remote",
    "alternatives": ["git remote show"]
}, {
    "title": "Get list of all local and remote branches",
    "tip": "git branch -a"
}, {
    "title": "Get only remote branches",
    "tip": "git branch -r"
}, {
    "title": "Stage parts of a changed file, instead of the entire file",
    "tip": "git add -p"
}, {
    "title": "Get git bash completion",
    "tip": "curl -L http://git.io/vfhol > ~/.git-completion.bash && echo '[ -f ~/.git-completion.bash ] && . ~/.git-completion.bash' >> ~/.bashrc"
}, {
    "title": "What changed since two weeks?",
    "tip": "git log --no-merges --raw --since='2 weeks ago'"
}, {
    "title": "See all commits made since forking from master",
    "tip": "git log --no-merges --stat --reverse master.."
}, {
    "title": "Pick commits across branches using cherry-pick",
    "tip": "git checkout <branch-name> && git cherry-pick <commit-ish>"
}, {
    "title": "Find out branches containing commit-hash",
    "tip": "git branch -a --contains <commit-ish>"
}, {
    "title": "Git Aliases",
    "tip": "git config --global alias.<handle> <command> \ngit config --global alias.st status"
}, {
    "title": "Saving current state of tracked files without commiting",
    "tip": "git stash"
}, {
    "title": "Saving current state of unstaged changes to tracked files",
    "tip": "git stash -k"
}, {
    "title": "Saving current state including untracked files",
    "tip": "git stash -u"
}, {
    "title": "Saving current state with message",
    "tip": "git stash push -m <message>"
}, {
    "title": "Saving current state of all files (ignored, untracked, and tracked)",
    "tip": "git stash -a"
}, {
    "title": "Show list of all saved stashes",
    "tip": "git stash list"
}, {
    "title": "Show the contents of any stash in patch form",
    "tip": "git stash show -p <stash@{n}>"
}, {
    "title": "Apply any stash without deleting from the stashed list",
    "tip": "git stash apply <stash@{n}>"
}, {
    "title": "Apply last stashed state and delete it from stashed list",
    "tip": "git stash pop"
}]